// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, Updown, app, exports, moment, request, util;

  request = require('request');

  global.serviceList = {};

  util = require('util');

  moment = require('moment');

  Updown = function(name, data) {
    this.name = name;
    this.data = data;
    this.interval = this.data.interval = this.data.interval || 1000 * 60;
    serviceList[name] = data;
    this.init();
    return this;
  };

  EventEmitter = require("events").EventEmitter;

  exports = module.exports = Updown;

  exports.version = "0.0.1";

  app = require("./http");

  exports.app = app;

  exports.createService = function(name, data) {
    return new Updown(name, data);
  };

  /*
  Inherit from `EventEmitter.prototype`.
  */


  Updown.prototype.__proto__ = EventEmitter.prototype;

  Updown.prototype.init = function() {
    console.log('initialize');
    serviceList[this.name].info = {};
    serviceList[this.name].name = this.name.replace(' ', '-');
    this.ping(this);
    return setInterval(this.ping, this.interval, this);
  };

  Updown.prototype.ping = function(updown) {
    var interval, url;

    url = updown.data.url;
    interval = updown.interval / 1000;
    console.log('ping');
    serviceList[updown.name].info.last_run = moment().format('HH:mm:ss');
    serviceList[updown.name].info.next_run = moment().add('seconds', interval).format('HH:mm:ss');
    return request(url, function(err, res, body) {
      if (err != null) {
        updown.isNotOk();
        return updown.emit('down', err);
      } else {
        updown.isOk();
        return updown.emit('up', res, body);
      }
    });
  };

  Updown.prototype.done = function(data) {
    if (data == null) {
      data = null;
    }
    serviceList[this.name].info.data = data;
    return console.log('on done');
  };

  Updown.prototype.isOk = function(data) {
    return serviceList[this.name].info.status = 'UP';
  };

  Updown.prototype.isNotOk = function(data) {
    return serviceList[this.name].info.status = 'DOWN';
  };

}).call(this);
