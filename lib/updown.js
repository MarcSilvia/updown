// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Updown, app, cronJob, exports, moment, request, util;

  request = require('request');

  global.serviceList = {};

  util = require('util');

  moment = require('moment');

  cronJob = require('cron').CronJob;

  Updown = function(name, config) {
    this.name = name;
    this.config = config;
    this.config.interval = this.config.interval || 1000 * 60 * 5;
    this.service_name = name.toLowerCase();
    if (serviceList[this.service_name] != null) {
      throw new Error("Duplicate service name: " + this.name);
    }
    serviceList[this.service_name] = this.config;
    this.init();
    return this;
  };

  EventEmitter = require("events").EventEmitter;

  exports = module.exports = Updown;

  exports.version = "0.0.1";

  app = require("./http");

  exports.app = app;

  exports.createService = function(name, config) {
    return new Updown(name, config);
  };

  /*
  Inherit from `EventEmitter.prototype`.
  */


  Updown.prototype.__proto__ = EventEmitter.prototype;

  Updown.prototype.init = function() {
    var self;
    self = this;
    console.log('initialize');
    this.on('error', function() {});
    serviceList[this.service_name].info = {};
    serviceList[this.service_name].name = this.name.replace(' ', '-');
    serviceList[this.service_name].name_origin = this.name;
    if ((this.config.ping != null) && this.config.ping === true) {
      this.ping(this);
    }
    try {
      return new cronJob({
        cronTime: this.config.cronTime,
        onTick: function() {
          return self.ping(self);
        },
        start: true
      });
    } catch (e) {
      throw new Error('Cron pattern not valid');
    }
  };

  Updown.prototype.ping = function(updown) {
    var interval, url;
    url = updown.config.url;
    interval = updown.config.interval / 1000;
    serviceList[updown.service_name].info.last_run = moment().format('HH:mm:ss');
    serviceList[updown.service_name].info.next_run = moment().add('seconds', interval).format('HH:mm:ss');
    console.log('pingging....');
    return request(url, function(err, res, body) {
      if (err != null) {
        updown.isNotOk();
        return updown.emit('error', err);
      } else {
        if (res.statusCode === 200) {
          updown.isOk();
          return updown.emit('success', res, body);
        } else {
          return updown.emit('error', body);
        }
      }
    });
  };

  Updown.prototype.process = function(fn, self) {
    var done, interval, updown;
    updown = self || this;
    console.log('run process');
    updown.process_fn = fn;
    interval = updown.config.interval / 1000;
    serviceList[updown.service_name].info.last_run = moment().format('HH:mm:ss');
    serviceList[updown.service_name].info.next_run = moment().add('seconds', interval).format('HH:mm:ss');
    done = {
      success: function(data) {
        return updown.success(data);
      },
      error: function(data) {
        return updown.error(data);
      }
    };
    return fn(done);
  };

  Updown.prototype.error = function(data) {
    setTimeout(this.process, this.config.interval, this.process_fn, this);
    return this.isNotOk(data);
  };

  Updown.prototype.success = function(data) {
    console.log('-------------------------------');
    console.log('success');
    setTimeout(this.process, this.config.interval, this.process_fn, this);
    return this.isOk(data);
  };

  Updown.prototype.isOk = function(data) {
    if (data == null) {
      data = null;
    }
    serviceList[this.service_name].info.data = data;
    return serviceList[this.service_name].info.status = 'UP';
  };

  Updown.prototype.isNotOk = function(data) {
    if (data == null) {
      data = null;
    }
    serviceList[this.service_name].info.data = data;
    return serviceList[this.service_name].info.status = 'DOWN';
  };

}).call(this);
