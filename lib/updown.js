// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Updown, app, cronJob, exports, moment, request, timeFormat, util;

  request = require('request');

  global.serviceList = {};

  util = require('util');

  moment = require('moment');

  cronJob = require('cron').CronJob;

  timeFormat = 'MMM D YYYY, h:mm:ss a';

  Updown = function(name, config) {
    this.name = name;
    this.config = config;
    this.config.cronTime = this.config.cronTime || '00 */1 * * * *';
    this.service_name = name.toLowerCase();
    if (serviceList[this.service_name] != null) {
      throw new Error("Duplicate service name: " + this.name);
    }
    serviceList[this.service_name] = this.config;
    this.init();
    return this;
  };

  EventEmitter = require("events").EventEmitter;

  exports = module.exports = Updown;

  exports.version = "0.0.1";

  app = require("./http");

  exports.app = app;

  exports.createService = function(name, config) {
    return new Updown(name, config);
  };

  /*
  Inherit from `EventEmitter.prototype`.
  */


  Updown.prototype.__proto__ = EventEmitter.prototype;

  Updown.prototype.init = function() {
    var self;
    self = this;
    this.on('error', function() {});
    this.setCronTime('ping');
    serviceList[this.service_name].info = {};
    serviceList[this.service_name].name = this.name.replace(' ', '-');
    serviceList[this.service_name].name_origin = this.name;
    serviceList[this.service_name].info.interval = this.cronTime.cronTime.getTimeout();
    if ((this.config.ping != null) && this.config.ping === true) {
      return this.ping(this);
    }
  };

  Updown.prototype.ping = function() {
    var interval, self, url;
    self = this;
    url = this.config.url;
    interval = this.cronTime._timeout._idleTimeout / 1000;
    serviceList[this.service_name].info.last_run = moment().format(timeFormat);
    serviceList[this.service_name].info.next_run = moment().add('seconds', interval).format(timeFormat);
    return request(url, function(err, res, body) {
      if (err != null) {
        self.isNotOk();
        return self.emit('error', err);
      } else {
        if (res.statusCode === 200) {
          self.isOk();
          return self.emit('success', res, body);
        } else {
          return self.emit('error', body);
        }
      }
    });
  };

  Updown.prototype.process = function(fn) {
    var done, interval, self;
    self = this;
    this.process_fn = fn;
    this.setCronTime('process');
    interval = this.cronTime._timeout._idleTimeout / 1000;
    serviceList[this.service_name].info.last_run = moment().format(timeFormat);
    serviceList[this.service_name].info.next_run = moment().add('seconds', interval).format(timeFormat);
    done = {
      success: function(data) {
        return self.success(data);
      },
      error: function(data) {
        return self.error(data);
      }
    };
    return fn(done);
  };

  Updown.prototype.setCronTime = function(type) {
    var self;
    self = this;
    try {
      return this.cronTime = new cronJob({
        cronTime: self.config.cronTime,
        onTick: function() {
          if (type === 'ping') {
            return self.ping();
          } else if (type === 'process') {
            return self.process(self.process_fn);
          } else {
            return thorw(new Error('setCrontime type not valid'));
          }
        },
        start: true
      });
    } catch (e) {
      throw new Error('Cron pattern not valid');
    }
  };

  Updown.prototype.error = function(data) {
    return this.isNotOk(data);
  };

  Updown.prototype.success = function(data) {
    console.log('-------------------------------');
    console.log('success');
    return this.isOk(data);
  };

  Updown.prototype.isOk = function(data) {
    if (data == null) {
      data = null;
    }
    serviceList[this.service_name].info.data = data;
    serviceList[this.service_name].info.status = 'UP';
    return serviceList[this.service_name].info.interval = this.cronTime.cronTime.getTimeout();
  };

  Updown.prototype.isNotOk = function(data) {
    if (data == null) {
      data = null;
    }
    serviceList[this.service_name].info.data = data;
    serviceList[this.service_name].info.status = 'DOWN';
    return serviceList[this.service_name].info.interval = this.cronTime.cronTime.getTimeout();
  };

}).call(this);
